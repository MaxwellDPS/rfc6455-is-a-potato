error_log /dev/stdout info;


events {}

http {
        # Define a map block to set the $connection_upgrade variable based on the value of $http_upgrade.
        # This helps to manage WebSocket connections by upgrading or closing the connection as needed.
        map $http_upgrade $connection_upgrade {
            default      upgrade; # If $http_upgrade has any value, set $connection_upgrade to "upgrade".
            ''           close;   # If $http_upgrade is empty, set $connection_upgrade to "close".
        }
        server_tokens off;
        access_log /dev/stdout;


# Begin defining a server block for the Nginx configuration.
server {
    listen 80;           # Listen on port 80 for IPv4.
    listen [::]:80;      # Listen on port 80 for IPv6.

    server_name _; # Use a wildcard server name to match any server name.

    # Define a location block for the /ts2021 endpoint.
    location /ts2021 {
        proxy_pass http://rfc6455-proxy:6969; # Pass requests to the rfc6455-proxy upstream defined earlier.
        proxy_http_version 1.1;          # Use HTTP/1.1 for proxying.
        proxy_set_header Host $host;     # Set the Host header to the value of $host.
        proxy_set_header X-Real-IP $remote_addr; # Set the X-Real-IP header to the client's IP address.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Add the client's IP to the X-Forwarded-For header.
        proxy_set_header X-Forwarded-Proto $scheme; # Set the X-Forwarded-Proto header to the request's scheme (http or https).
        proxy_set_header Upgrade $http_upgrade;    # Set the Upgrade header to the value of $http_upgrade for WebSocket support.
        proxy_set_header Connection "upgrade";     # Set the Connection header to "upgrade" for WebSocket support.
    }

    # Define a location block for all other endpoints.
    location / {
        proxy_pass http://headscale; # Pass requests to the specified backend server.
        proxy_http_version 1.1;      # Use HTTP/1.1 for proxying.
        proxy_set_header Upgrade $http_upgrade;  # Set the Upgrade header to the value of $http_upgrade for WebSocket support.
        proxy_set_header Connection $connection_upgrade; # Set the Connection header based on the value of $connection_upgrade.
        proxy_set_header Host $server_name;      # Set the Host header to the server's name.
        proxy_redirect http:// https://;         # Redirect HTTP to HTTPS.
        proxy_buffering off;                     # Disable response buffering.
        proxy_set_header X-Real-IP $remote_addr; # Set the X-Real-IP header to the client's IP address.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Add the client's IP to the X-Forwarded-For header.
        proxy_set_header X-Forwarded-Proto $scheme; # Set the X-Forwarded-Proto header to the request's scheme (http or https).
        # Add a Strict-Transport-Security header to enforce HTTPS for 180 days and include subdomains.
        add_header Strict-Transport-Security "max-age=15552000; includeSubDomains" always;
    }

    # Define a location block for the /metrics endpoint.
    location /metrics {
        stub_status; # Enable Nginx stub status module to expose basic status information.
    }
}



# Begin defining a server block for the TLS Nginx configuration.
server {
    listen 443      ssl http2; # Listen on port 443 for IPv4 with SSL and HTTP/2.
    listen [::]:443 ssl http2; # Listen on port 443 for IPv6 with SSL and HTTP/2.

    server_name _; # Use a wildcard server name to match any server name.

    # Define SSL certificate and key file locations.
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;

    # Specify the SSL protocols to use.
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

 
    # Define a location block for all other endpoints.
    location / {
        proxy_pass http://headscale:8080; # Pass requests to the specified backend server.
        proxy_http_version 1.1;      # Use HTTP/1.1 for proxying.
        proxy_ssl_server_name on;
        proxy_set_header Upgrade $http_upgrade;  # Set the Upgrade header to the value of $http_upgrade for WebSocket support.
        proxy_set_header Connection $connection_upgrade; # Set the Connection header based on the value of $connection_upgrade.
        proxy_set_header Host $server_name;      # Set the Host header to the server's name.
        proxy_redirect http:// https://;         # Redirect HTTP to HTTPS.
        proxy_buffering off;                     # Disable response buffering.
        proxy_set_header X-Real-IP $remote_addr; # Set the X-Real-IP header to the client's IP address.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Add the client's IP to the X-Forwarded-For header.
        proxy_set_header X-Forwarded-Proto $scheme; # Set the X-Forwarded-Proto header to the request's scheme (http or https).
        # Add a Strict-Transport-Security header to enforce HTTPS for 180 days and include subdomains.
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
        add_header Strict-Transport-Security "max-age=15552000; includeSubDomains" always;
    }

     # Define a location block for all other endpoints.
    location /admin {
        proxy_pass http://headscale-admin:80/admin; # Pass requests to the specified backend server.
        proxy_set_header Upgrade $http_upgrade;  # Set the Upgrade header to the value of $http_upgrade for WebSocket support.
        proxy_ssl_server_name on;
        proxy_set_header Connection $connection_upgrade; # Set the Connection header based on the value of $connection_upgrade.
        proxy_set_header Host $server_name;      # Set the Host header to the server's name.
        proxy_redirect http:// https://;         # Redirect HTTP to HTTPS.
        proxy_buffering off;                     # Disable response buffering.
        proxy_set_header X-Real-IP $remote_addr; # Set the X-Real-IP header to the client's IP address.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Add the client's IP to the X-Forwarded-For header.
        proxy_set_header X-Forwarded-Proto $scheme; # Set the X-Forwarded-Proto header to the request's scheme (http or https).
        # Add a Strict-Transport-Security header to enforce HTTPS for 180 days and include subdomains.
        add_header Strict-Transport-Security "max-age=15552000; includeSubDomains" always;
    }

     # Define a location block for the /ts2021 endpoint.
    location /ts2021 {
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
        proxy_pass http://rfc6455-proxy:6969; # Pass requests to the rfc6455-proxy upstream defined earlier.
        proxy_http_version 1.1;          # Use HTTP/1.1 for proxying.
        proxy_set_header Host $host;     # Set the Host header to the value of $host.
        proxy_set_header X-Real-IP $remote_addr; # Set the X-Real-IP header to the client's IP address.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Add the client's IP to the X-Forwarded-For header.
        proxy_set_header X-Forwarded-Proto "http"; # Set the X-Forwarded-Proto header to the request's scheme (http or https).
        proxy_set_header Upgrade $http_upgrade;    # Set the Upgrade header to the value of $http_upgrade for WebSocket support.
        proxy_set_header Connection "upgrade";     # Set the Connection header to "upgrade" for WebSocket support.
    }


}
}